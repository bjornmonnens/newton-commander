require 'fileutils'

def log_write(filename, text)
  File.open(filename, 'a+') {|f| f.write(text) }
end

def reveal_in_finder(filename)
  path = File.expand_path(filename)
  ary = [
    "osascript",
    %(-e 'tell application "Finder"'),
    %(-e 'activate'),
    %(-e 'reveal posix file "%s"') % path,
    %(-e 'end tell')
  ]
  cmd = ary.join(' ')
#  puts cmd
  system cmd
end

def copy_without_unwanted_stuff(source_dir, dest_dir, log_file)
  print "copying... "
  $stdout.flush
  
  log_write(log_file, "-------------\ncopy_without_unwanted_stuff\n\n")
  
  exclude = <<EXCL
.DS_Store
Headers/
PrivateHeaders/
.svn/
.git/
.bzr/
*.h
*.m
*.mm
*.c
*.cpp
*.pch
*.xcconfig
InfoPlist.strings
# *.icns
EXCL

  # -C, --cvs-exclude    auto-ignore files in the same way CVS does
  # -a   archive mode
  # -v, --verbose               increase verbosity
  ENV["SOURCE_DIR"] = source_dir
  ENV["DEST_DIR"]   = dest_dir
  ENV["EXCLUDE"]    = exclude
  ENV["LOG_FILE"]   = log_file
  s = <<CMD
echo "$EXCLUDE" | /usr/bin/rsync -Cav --exclude-from=- --delete-excluded "$SOURCE_DIR"/ "$DEST_DIR" >> "$LOG_FILE"
CMD
  system s

  log_write(log_file, "\nDONE\n\n")

  puts "OK"
end

class DeployApplication
  
  def initialize
    @path_build_app = File.expand_path('../build/Release/NCWorkerTest.app')
    @path_desktop = File.expand_path("~/Desktop")
    @path_fixpermissions = File.expand_path("fix_permissions.sh")
    @path_destination = File.join(@path_desktop, Time.now.strftime('%Y_%m_%d_%H_%M_%S'))
    @app_dir = 'NCWorkerTest.app'
  end
  
  def main
    if FileTest.exist?(@path_destination)
      raise "ERROR: destination dir already exists. path: #{@path_destination}. Remove dir or try again"
    end
    FileUtils.mkdir(@path_destination)

    path_log_copy = File.join(@path_destination, "log_copy.txt")
    path_log_permissions = File.join(@path_destination, "log_permissions.txt")
    path_app = File.join(@path_destination, @app_dir)

    copy_without_unwanted_stuff(@path_build_app, path_app, path_log_copy)

    Dir.chdir(path_app) do
      Dir.chdir("Contents/MacOS") do
        system(@path_fixpermissions + " >> " + path_log_permissions)
      end 
    end

    reveal_in_finder(path_app)
  end
  
end


task :default => [:fix_permissions, :deploy]
task :deploy do
  DeployApplication.new.main
end


task :fix_permissions do 
  st = File.stat('fix_permissions.sh')
  raise unless st.file?
  if st.uid != 0
    puts "chown. will set uid=0  (uid is #{st.uid})"
    system("sudo chown root fix_permissions.sh")
  end
  if st.gid != 0
    puts "chgrp. will set gid=0  (gid is #{st.gid})"
    system("sudo chgrp wheel fix_permissions.sh")
  end
  if (st.mode & 06777) != 06755
    mode = st.mode.to_s(8)
    puts "chgrp. will set mode=06755 (mode is #{mode})"
    system("sudo chmod 6755 fix_permissions.sh")
  end
end